require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe UpgradesController do

  def mock_upgrade(stubs={})
    @mock_upgrade ||= mock_model(Upgrade, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all upgrades as @upgrades" do
      Upgrade.stub(:all) { [mock_upgrade] }
      get :index
      assigns(:upgrades).should eq([mock_upgrade])
    end
  end

  describe "GET show" do
    it "assigns the requested upgrade as @upgrade" do
      Upgrade.stub(:find).with("37") { mock_upgrade }
      get :show, :id => "37"
      assigns(:upgrade).should be(mock_upgrade)
    end
  end

  describe "GET new" do
    it "assigns a new upgrade as @upgrade" do
      Upgrade.stub(:new) { mock_upgrade }
      get :new
      assigns(:upgrade).should be(mock_upgrade)
    end
  end

  describe "GET edit" do
    it "assigns the requested upgrade as @upgrade" do
      Upgrade.stub(:find).with("37") { mock_upgrade }
      get :edit, :id => "37"
      assigns(:upgrade).should be(mock_upgrade)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created upgrade as @upgrade" do
        Upgrade.stub(:new).with({'these' => 'params'}) { mock_upgrade(:save => true) }
        post :create, :upgrade => {'these' => 'params'}
        assigns(:upgrade).should be(mock_upgrade)
      end

      it "redirects to the created upgrade" do
        Upgrade.stub(:new) { mock_upgrade(:save => true) }
        post :create, :upgrade => {}
        response.should redirect_to(upgrade_url(mock_upgrade))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved upgrade as @upgrade" do
        Upgrade.stub(:new).with({'these' => 'params'}) { mock_upgrade(:save => false) }
        post :create, :upgrade => {'these' => 'params'}
        assigns(:upgrade).should be(mock_upgrade)
      end

      it "re-renders the 'new' template" do
        Upgrade.stub(:new) { mock_upgrade(:save => false) }
        post :create, :upgrade => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested upgrade" do
        Upgrade.stub(:find).with("37") { mock_upgrade }
        mock_upgrade.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :upgrade => {'these' => 'params'}
      end

      it "assigns the requested upgrade as @upgrade" do
        Upgrade.stub(:find) { mock_upgrade(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:upgrade).should be(mock_upgrade)
      end

      it "redirects to the upgrade" do
        Upgrade.stub(:find) { mock_upgrade(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(upgrade_url(mock_upgrade))
      end
    end

    describe "with invalid params" do
      it "assigns the upgrade as @upgrade" do
        Upgrade.stub(:find) { mock_upgrade(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:upgrade).should be(mock_upgrade)
      end

      it "re-renders the 'edit' template" do
        Upgrade.stub(:find) { mock_upgrade(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested upgrade" do
      Upgrade.stub(:find).with("37") { mock_upgrade }
      mock_upgrade.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the upgrades list" do
      Upgrade.stub(:find) { mock_upgrade }
      delete :destroy, :id => "1"
      response.should redirect_to(upgrades_url)
    end
  end

end
